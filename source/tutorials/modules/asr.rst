语音识别模块 
====================================================== 
语音识别模块，通信接口I2C。模块上电处于休眠状态，在语音唤醒后为正常运行状态，此时状态指示灯亮蓝色。
每次唤醒触发运行时长15秒，可以重复触发。

.. figure:: asr.png 
   :width: 260
   :align: center


“唤醒词”和“命令词”
++++++++++++++++++++++++++++++++++++++++++++++++++++++

语音识别关键词分“唤醒词”和“命令词”，


反馈音音量调节 
++++++++++++++++++++++++++++++++++++++++++++++++++++++

模块外接扬声器播放语音识别反馈音，
反馈音音量调节命令词
    增大音量
    减小音量
    最大音量
    中等音量
    最小音量
    
自学习模式    
++++++++++++++++++++++++++++++++++++++++++++++++++++++    
自学习模式命令词

============ =========
 关键词       说明
============ =========  
学习唤醒词 
学习命令词
重新学习
退出学习
我要删除
删除唤醒词
删除命令词
退出删除
全部删除
============ ========= 


应用编程接口说明
++++++++++++++++++++++++++++++++++++++++++++++++++++++

::

    '''
     导入 asr 模块 
    '''
    from openaie import asr
	
    '''
     类：语音识别模块 
     参数:
        port: 端口号 -- 1~8 
    '''
    class asr(port)
    
    '''
     方法：读取语音识别结果
     返回值: 若为0，表示未识别到唤醒词或命令词 
    '''
    asr.read()
     
     
案例
++++++++++++++++++++++++++++++++++++++++++++++++++++++

**1. 语音识别开关灯**
 
::

    import time 
    from openaie import *
                
    rgb = rgb_led(1)
    asr = asr(7) # 语音识别模块连接 端口7  

    while True:
        res = asr.read() # 读取语音识别结果 
        if (res != 0) : # 非 0 为语音识别到唤醒词或命令词
            print("recive cmd: ", res)
            if res == 5 or res == 6 :  # 对应命令词：开灯，打开灯 
                rgb.set(0, (50,50,50))
                rgb.display()
            elif res == 7 or res == 8 :  # 对应命令词：关灯，关闭灯
                rgb.set(0, (0,0,0))
                rgb.display()
            time.sleep_ms(100)  

            
**2. 语音识别控制风扇** 

::

    import time 
    from openaie import *
                
    asr = asr(7)      # 语音识别模块连接 端口7  
    m = motor_fan(6) # 电机风扇模块连接 端口6    

    while True:
        res = asr.read()
        if (res != 0) :
            print("recive cmd: ", res)
            if res == 31 or res == 32 : # 对应命令词：开风扇，打开风扇
                m.set(50)
            elif res == 33 or res == 34: # 对应命令词：关风扇，关闭风扇
                m.set(0)
            elif res >= 35 and res <= 39: # 风速设置 
                m.set((res-34)*20)
                print("speed: ", (res-34)*20)
            time.sleep_ms(100)   

------------------------------------------------------
            
            
            